// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/SergeyBogomolovv/fitflow/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// SaveUser provides a mock function with given fields: ctx, id, lvl
func (_m *UserRepo) SaveUser(ctx context.Context, id int64, lvl domain.UserLvl) error {
	ret := _m.Called(ctx, id, lvl)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.UserLvl) error); ok {
		r0 = rf(ctx, id, lvl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type UserRepo_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - lvl domain.UserLvl
func (_e *UserRepo_Expecter) SaveUser(ctx interface{}, id interface{}, lvl interface{}) *UserRepo_SaveUser_Call {
	return &UserRepo_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, id, lvl)}
}

func (_c *UserRepo_SaveUser_Call) Run(run func(ctx context.Context, id int64, lvl domain.UserLvl)) *UserRepo_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(domain.UserLvl))
	})
	return _c
}

func (_c *UserRepo_SaveUser_Call) Return(_a0 error) *UserRepo_SaveUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_SaveUser_Call) RunAndReturn(run func(context.Context, int64, domain.UserLvl) error) *UserRepo_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribers provides a mock function with given fields: ctx, lvl, all
func (_m *UserRepo) Subscribers(ctx context.Context, lvl domain.UserLvl, all bool) ([]domain.User, error) {
	ret := _m.Called(ctx, lvl, all)

	if len(ret) == 0 {
		panic("no return value specified for Subscribers")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserLvl, bool) ([]domain.User, error)); ok {
		return rf(ctx, lvl, all)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserLvl, bool) []domain.User); ok {
		r0 = rf(ctx, lvl, all)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserLvl, bool) error); ok {
		r1 = rf(ctx, lvl, all)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_Subscribers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribers'
type UserRepo_Subscribers_Call struct {
	*mock.Call
}

// Subscribers is a helper method to define mock.On call
//   - ctx context.Context
//   - lvl domain.UserLvl
//   - all bool
func (_e *UserRepo_Expecter) Subscribers(ctx interface{}, lvl interface{}, all interface{}) *UserRepo_Subscribers_Call {
	return &UserRepo_Subscribers_Call{Call: _e.mock.On("Subscribers", ctx, lvl, all)}
}

func (_c *UserRepo_Subscribers_Call) Run(run func(ctx context.Context, lvl domain.UserLvl, all bool)) *UserRepo_Subscribers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserLvl), args[2].(bool))
	})
	return _c
}

func (_c *UserRepo_Subscribers_Call) Return(_a0 []domain.User, _a1 error) *UserRepo_Subscribers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_Subscribers_Call) RunAndReturn(run func(context.Context, domain.UserLvl, bool) ([]domain.User, error)) *UserRepo_Subscribers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscribed provides a mock function with given fields: ctx, id, subscribed
func (_m *UserRepo) UpdateSubscribed(ctx context.Context, id int64, subscribed bool) error {
	ret := _m.Called(ctx, id, subscribed)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscribed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) error); ok {
		r0 = rf(ctx, id, subscribed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_UpdateSubscribed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscribed'
type UserRepo_UpdateSubscribed_Call struct {
	*mock.Call
}

// UpdateSubscribed is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - subscribed bool
func (_e *UserRepo_Expecter) UpdateSubscribed(ctx interface{}, id interface{}, subscribed interface{}) *UserRepo_UpdateSubscribed_Call {
	return &UserRepo_UpdateSubscribed_Call{Call: _e.mock.On("UpdateSubscribed", ctx, id, subscribed)}
}

func (_c *UserRepo_UpdateSubscribed_Call) Run(run func(ctx context.Context, id int64, subscribed bool)) *UserRepo_UpdateSubscribed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *UserRepo_UpdateSubscribed_Call) Return(_a0 error) *UserRepo_UpdateSubscribed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_UpdateSubscribed_Call) RunAndReturn(run func(context.Context, int64, bool) error) *UserRepo_UpdateSubscribed_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserLvl provides a mock function with given fields: ctx, id, lvl
func (_m *UserRepo) UpdateUserLvl(ctx context.Context, id int64, lvl domain.UserLvl) error {
	ret := _m.Called(ctx, id, lvl)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserLvl")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.UserLvl) error); ok {
		r0 = rf(ctx, id, lvl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_UpdateUserLvl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserLvl'
type UserRepo_UpdateUserLvl_Call struct {
	*mock.Call
}

// UpdateUserLvl is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - lvl domain.UserLvl
func (_e *UserRepo_Expecter) UpdateUserLvl(ctx interface{}, id interface{}, lvl interface{}) *UserRepo_UpdateUserLvl_Call {
	return &UserRepo_UpdateUserLvl_Call{Call: _e.mock.On("UpdateUserLvl", ctx, id, lvl)}
}

func (_c *UserRepo_UpdateUserLvl_Call) Run(run func(ctx context.Context, id int64, lvl domain.UserLvl)) *UserRepo_UpdateUserLvl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(domain.UserLvl))
	})
	return _c
}

func (_c *UserRepo_UpdateUserLvl_Call) Return(_a0 error) *UserRepo_UpdateUserLvl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_UpdateUserLvl_Call) RunAndReturn(run func(context.Context, int64, domain.UserLvl) error) *UserRepo_UpdateUserLvl_Call {
	_c.Call.Return(run)
	return _c
}

// UserExists provides a mock function with given fields: ctx, id
func (_m *UserRepo) UserExists(ctx context.Context, id int64) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UserExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_UserExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExists'
type UserRepo_UserExists_Call struct {
	*mock.Call
}

// UserExists is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *UserRepo_Expecter) UserExists(ctx interface{}, id interface{}) *UserRepo_UserExists_Call {
	return &UserRepo_UserExists_Call{Call: _e.mock.On("UserExists", ctx, id)}
}

func (_c *UserRepo_UserExists_Call) Run(run func(ctx context.Context, id int64)) *UserRepo_UserExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserRepo_UserExists_Call) Return(_a0 bool, _a1 error) *UserRepo_UserExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_UserExists_Call) RunAndReturn(run func(context.Context, int64) (bool, error)) *UserRepo_UserExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
