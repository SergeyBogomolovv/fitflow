// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/SergeyBogomolovv/fitflow/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// AdminRepo is an autogenerated mock type for the AdminRepo type
type AdminRepo struct {
	mock.Mock
}

type AdminRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *AdminRepo) EXPECT() *AdminRepo_Expecter {
	return &AdminRepo_Expecter{mock: &_m.Mock}
}

// AdminByLogin provides a mock function with given fields: ctx, login
func (_m *AdminRepo) AdminByLogin(ctx context.Context, login string) (domain.Admin, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for AdminByLogin")
	}

	var r0 domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Admin, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Admin); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(domain.Admin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminRepo_AdminByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminByLogin'
type AdminRepo_AdminByLogin_Call struct {
	*mock.Call
}

// AdminByLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *AdminRepo_Expecter) AdminByLogin(ctx interface{}, login interface{}) *AdminRepo_AdminByLogin_Call {
	return &AdminRepo_AdminByLogin_Call{Call: _e.mock.On("AdminByLogin", ctx, login)}
}

func (_c *AdminRepo_AdminByLogin_Call) Run(run func(ctx context.Context, login string)) *AdminRepo_AdminByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AdminRepo_AdminByLogin_Call) Return(_a0 domain.Admin, _a1 error) *AdminRepo_AdminByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminRepo_AdminByLogin_Call) RunAndReturn(run func(context.Context, string) (domain.Admin, error)) *AdminRepo_AdminByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewAdminRepo creates a new instance of AdminRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminRepo {
	mock := &AdminRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
