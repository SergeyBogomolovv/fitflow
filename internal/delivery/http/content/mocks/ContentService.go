// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/SergeyBogomolovv/fitflow/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ContentService is an autogenerated mock type for the ContentService type
type ContentService struct {
	mock.Mock
}

type ContentService_Expecter struct {
	mock *mock.Mock
}

func (_m *ContentService) EXPECT() *ContentService_Expecter {
	return &ContentService_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function with given fields: ctx, in
func (_m *ContentService) CreatePost(ctx context.Context, in domain.CreatePostDTO) (domain.Post, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 domain.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreatePostDTO) (domain.Post, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreatePostDTO) domain.Post); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(domain.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.CreatePostDTO) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentService_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type ContentService_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - in domain.CreatePostDTO
func (_e *ContentService_Expecter) CreatePost(ctx interface{}, in interface{}) *ContentService_CreatePost_Call {
	return &ContentService_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, in)}
}

func (_c *ContentService_CreatePost_Call) Run(run func(ctx context.Context, in domain.CreatePostDTO)) *ContentService_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreatePostDTO))
	})
	return _c
}

func (_c *ContentService_CreatePost_Call) Return(_a0 domain.Post, _a1 error) *ContentService_CreatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContentService_CreatePost_Call) RunAndReturn(run func(context.Context, domain.CreatePostDTO) (domain.Post, error)) *ContentService_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateContent provides a mock function with given fields: ctx, theme
func (_m *ContentService) GenerateContent(ctx context.Context, theme string) (string, error) {
	ret := _m.Called(ctx, theme)

	if len(ret) == 0 {
		panic("no return value specified for GenerateContent")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, theme)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, theme)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, theme)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentService_GenerateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateContent'
type ContentService_GenerateContent_Call struct {
	*mock.Call
}

// GenerateContent is a helper method to define mock.On call
//   - ctx context.Context
//   - theme string
func (_e *ContentService_Expecter) GenerateContent(ctx interface{}, theme interface{}) *ContentService_GenerateContent_Call {
	return &ContentService_GenerateContent_Call{Call: _e.mock.On("GenerateContent", ctx, theme)}
}

func (_c *ContentService_GenerateContent_Call) Run(run func(ctx context.Context, theme string)) *ContentService_GenerateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ContentService_GenerateContent_Call) Return(_a0 string, _a1 error) *ContentService_GenerateContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContentService_GenerateContent_Call) RunAndReturn(run func(context.Context, string) (string, error)) *ContentService_GenerateContent_Call {
	_c.Call.Return(run)
	return _c
}

// Posts provides a mock function with given fields: ctx, audience, published
func (_m *ContentService) Posts(ctx context.Context, audience domain.UserLvl, published bool) ([]domain.Post, error) {
	ret := _m.Called(ctx, audience, published)

	if len(ret) == 0 {
		panic("no return value specified for Posts")
	}

	var r0 []domain.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserLvl, bool) ([]domain.Post, error)); ok {
		return rf(ctx, audience, published)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserLvl, bool) []domain.Post); ok {
		r0 = rf(ctx, audience, published)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserLvl, bool) error); ok {
		r1 = rf(ctx, audience, published)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentService_Posts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Posts'
type ContentService_Posts_Call struct {
	*mock.Call
}

// Posts is a helper method to define mock.On call
//   - ctx context.Context
//   - audience domain.UserLvl
//   - published bool
func (_e *ContentService_Expecter) Posts(ctx interface{}, audience interface{}, published interface{}) *ContentService_Posts_Call {
	return &ContentService_Posts_Call{Call: _e.mock.On("Posts", ctx, audience, published)}
}

func (_c *ContentService_Posts_Call) Run(run func(ctx context.Context, audience domain.UserLvl, published bool)) *ContentService_Posts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserLvl), args[2].(bool))
	})
	return _c
}

func (_c *ContentService_Posts_Call) Return(_a0 []domain.Post, _a1 error) *ContentService_Posts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContentService_Posts_Call) RunAndReturn(run func(context.Context, domain.UserLvl, bool) ([]domain.Post, error)) *ContentService_Posts_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePost provides a mock function with given fields: ctx, id
func (_m *ContentService) RemovePost(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemovePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContentService_RemovePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePost'
type ContentService_RemovePost_Call struct {
	*mock.Call
}

// RemovePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *ContentService_Expecter) RemovePost(ctx interface{}, id interface{}) *ContentService_RemovePost_Call {
	return &ContentService_RemovePost_Call{Call: _e.mock.On("RemovePost", ctx, id)}
}

func (_c *ContentService_RemovePost_Call) Run(run func(ctx context.Context, id int64)) *ContentService_RemovePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ContentService_RemovePost_Call) Return(_a0 error) *ContentService_RemovePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContentService_RemovePost_Call) RunAndReturn(run func(context.Context, int64) error) *ContentService_RemovePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewContentService creates a new instance of ContentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContentService {
	mock := &ContentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
